/* autogenerated by Processing revision 1276 on 2021-11-19 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class Final_Project extends PApplet {

PFont G;
Button bt;
Start stt;
DotArray DA;
DesignTool Dt;
Shake sk;

float Director=0;
float h=140;
int i=0;
int m=0;

PImage img;

int num=40;
float w=20;
int st=0;
float Jud=1;

 public void setup() {
  /* smooth commented out by preprocessor */;
  /* size commented out by preprocessor */;
  background(0xFFF9F1DB);
  bt =new Button(500, 500);
  stt=new Start();
  DA=new DotArray();
  sk=new Shake();
}

 public void draw() {
  if (Director==0) {
    bt.update();
    bt.display();
    stt.display();
  }
  if (Director==1) {
    ChoiceMode();
  }
  if (Director==2) {
    DA.display();
    if (mousePressed) {
      if (dist(mouseX, mouseY, 500, 500)<120) {
        ChoiceMode();
      }
    }
  }
  if (Director==3) {
    sk.display();
  }
  if (Director==4) {
    Dt=new DesignTool();
    if (Jud==2) {
      Dt.display();
    } else if (Jud==-1) {
      Dt.C_2();
    } else if (Jud==0) {
      Dt.change();
    }
  }
}




 public void mousePressed() {
  if (dist(mouseX, mouseY, 500, 500)<120) {
    Director=1;
  } else if (dist(mouseX, mouseY, 175, 175)<35) {
    Director=2;
  } else if (dist(mouseX, mouseY, 175, 455)<35) {
    Director=3;
  } else if (dist(mouseX, mouseY, 175, 725)<35) {
    background(0xFFF9F1DB);
    Director=4;
  }
  if (dist(mouseX, mouseY, 200, 800)<70) {
    w=40;
    st=0xFFEEA08C;
  } else if (dist(mouseX, mouseY, 400, 800)<70) {
    w=50;
    st=0xFFAA6A4C;
  } else if (dist(mouseX, mouseY, 600, 800)<70) {
    w=100;
    st=0xFFB4A992;
  } else if (dist(mouseX, mouseY, 800, 800)<70) {
    w=150;
    st=0xFF8E804B;
  }
  if (dist(mouseX, mouseY, 900, 200)<25) {
    Jud=2;
  } else if (dist(mouseX, mouseY, 900, 475)<25) {
    Jud=-1;
  } else if (dist(mouseX, mouseY, 890, 700)<35) {
    Jud=0;
  }
}



 public void keyPressed() {
  if (key==' ') {
    saveFrame(""+frameCount+".jpg");
  }
  if (key=='r') {
    background(255);
  }
}

 public void ChoiceMode() {//设置软件登入模式选择界面
  fill(0xFFD85916);
  textFont(G);
  textSize(50);
  text("Designing Mode", 335, 70);
  frameRate(10);
  if (i<20) {
    i+=1;
    if (i<10) {
      fill(0xFFF9F1DB, 60);
      rect(0, 0, width, height);
    }
    if (i==10) {
      fill(0xFFF9F1DB);
      rect(0, 0, width, height);
    }
    if (i>10) {
      if (m<3) {
        fill(0xFFB598A1, 60);
        rect(100, h, 800, 70);
        fill(0xFFB598A1, 80);
        rect(100, h, 150, 70);
        textSize(35);
        fill(0xFFB598A1);
        text("Mode"+0+(m+1), 120, h+40);
        text("Dot Arrays Image Processing", 350, 180);
        text("Dancing Image Processing", 350, 460);
        text("Free Design", 350, 740);
        h+=280;
        m+=1;
      } else {
        h+=0;
        m+=0;
      }
    }
  } else {
    i+=0;
  }
}
class Shake {
  Agentwo[]Ats;

  PImage img;

  Shake() {
    img=loadImage("1.jpg");
    img.resize(width, height);

    int num=0;
    for (int x=0; x<width; x+=6) {  //数数一共需要多少个点
      for (int y=0; y<height; y+=6) {
        if (brightness(img.get(x, y))<100) {
          num++;
        }
      }
    }

    Ats=new Agentwo[num];  //用刚才的计数num来初始化数组
    int index=0;
    for (int x=0; x<width; x+=6) {  //把符合条件的点挨个放入数组
      for (int y=0; y<height; y+=6) {
        if (brightness(img.get(x, y))<100) {
          Ats[index]=new Agentwo(x, y);
          index++;
        }
      }
    }
  }

   public void display() {
    frameRate(60);
    fill(255);
    rect(0,0,width,height);
    stroke(0);
    strokeWeight(4);
    fill(0xFFD85916);
    textSize(38);
    text("Dancing Mode", 400, 53);

    PVector predator = new PVector(mouseX, mouseY);  //鼠标就是"猎食者"
    for (int i=0; i<Ats.length; i++) {
      Ats[i].runAway(predator);  //逃离猎食者
      Ats[i].update();
      Ats[i].display();
    }
  }
}



class Agentwo {
  PVector target;
  PVector pos;
  PVector spd;

  PVector acc;

  Agentwo(float x, float y) {
    pos=new PVector(x, y);
    target=pos.copy();

    spd=new PVector(0, 0);
    acc=new PVector(0, 0);
  }

   public void runAway(PVector predator) {  //如果和鼠标的距离小于阈值，转身逃跑
    if (PVector.dist(predator, pos)<50) {
      acc=PVector.sub(pos, predator);
      acc.mult(0.3f);
      spd.add(acc);
      pos.add(spd);
    }
  }

   public void update() {
    acc=PVector.sub(target, pos);
    acc.mult(0.01f);
    spd.add(acc);
    pos.add(spd);
    spd.mult(0.97f);
  }

   public void display() {
    point(pos.x, pos.y);
  }
}
class Button {
  float xpos;
  float ypos;
  float diam;
  int n=0;
  float c=8;

  float normalDiam=120;  //普通尺寸
  float bigDiam=140;    //鼠标悬浮时的大尺寸

  float targetDiam=normalDiam;


  Button(float input_x, float input_y) {

    xpos=input_x;
    ypos=input_y;

    diam=normalDiam;
  }

   public boolean mouseOn() {  //判断鼠标是否在按钮内
    if (dist(mouseX, mouseY, xpos, ypos)<normalDiam/2) {
      return true;
    } else {
      return false;
    }
  }

   public void update() {
    if (mouseOn()) {
      targetDiam=bigDiam;
    } else {
      targetDiam=normalDiam;
    }

    float diamSpeed=(targetDiam-diam)*0.2f;
    diam+=diamSpeed;
  }

   public void display() {
    if (mouseOn()) {
      fill(120, 190, 240);
      ellipse(xpos, ypos, diam, diam);
    } else {
      noStroke();
      fill(0xFFF9F1DB);
      ellipse(xpos, ypos, diam+20, diam+20);
      fill(120, 190, 240, 127);
      ellipse(xpos, ypos, diam, diam);
      frameRate=20;
      diam+=random(-3, 3);
    }
  }
}
class DesignTool {
  int a;
  int []btsc={0xFF158BB8, 0xFFF8C387, 0xFF553B18, 0xFFE3BD8D};
  int []txtc={0xFFEEA08C, 0xFFAA6A4C, 0xFFB4A992, 0xFF8E804B};
  String []stw={"1", "2", "3", "4"};
  DesignTool() {
    float xpos_e=200;
    float ypos_e=800;
    noStroke();
    fill(0xFFEEA08C);
    rect(385, 10, 225, 50);
    fill(244);
    textSize(35);
    text("Draw Mode", 395, 56);
    for (int i=0; i<4; i++) {
      textSize(28);
      noStroke();
      fill(btsc[i]);
      ellipse((i+1)*xpos_e, ypos_e, 70, 70);
      fill(txtc[i]);
      text(stw[i], (i+1)*xpos_e, ypos_e);
    }
    noFill();
    stroke(30);
    ellipse(900, 200, 50, 50);
    rect(875, 450, 50, 50);
    rect(860, 675, 50, 50);
    ellipse(900, 700, 50, 50);
  }
   public void display() {
    if (mousePressed) {
      frameRate(60);
      noFill();
      stroke(st);
      ellipse(mouseX, mouseY, w, w);
    }
  }
   public void change() {
    float n=random(6, 20);
    float d=random(50, 100);
    float rad=map(mouseX, 0, width, 30, 90);
    if (mousePressed) {
      frameRate(5);
      pushMatrix();
      translate(mouseX, mouseY);
      strokeWeight(1);
      noFill();
      stroke(0xFFF7A34D);
      beginShape();//进行玫瑰形态的绘制
      for (float i = 0; i < TWO_PI; i+= (TWO_PI / 60)) {
        float k = i * d;
        float r = rad * sin(n*k);
        float x = r * cos(k);
        float y = r * sin(k);
        vertex(x, y);
      }
      endShape();
      popMatrix();
    }
  }

   public void C_2() {
    if (mousePressed) {
      frameRate(60);
      noFill();
      stroke(st);
      rect(mouseX, mouseY, w, w);
    }
  }
}
class DotArray {
  PImage pic;
  int as;
  float small_diam=2, big_diam=12;
  float point=0;


  DotArray() {
    pic=loadImage("1.jpg");
    pic.resize(width, height);
    noStroke();
  }

   public void display() {
    float threshold=map(mouseX, 0, 1000, 0, 250);  //亮度值高于250的地方，将不显示任何图案

    fill(255);
    rect(0, 0, width, height);

    fill(0xFF73575C);
    ellipse(570, 300, 80, 80);
    fill(0xFF126E82);
    ellipse(430, 300, 80, 80);
    fill(0xFFEEA08C);
    ellipse(500, 230, 80, 80);
    rect(385, 10, 225, 50);
    fill(255);
    textSize(28);
    text("Size",480,230);
    text("Blue",415,300);
    text("Red",555,300);
    fill(244);
    textSize(40);
    text("Dot Mode", 400, 53);
    fill(0xFFB598A1, 30);
    ellipse(500, 280, 250, 250);


    for (int x=0; x<width; x+=2) {
      for (int y=0; y<height; y+=10) {
        int c=pic.get(x, y);
        if (brightness(c)<threshold) {
          fill(as, 15);
          float diameter=map(brightness(c), threshold, 0, small_diam, big_diam); //亮度为110的时候，直径为2；亮度为0时直径12。线性映射
          ellipse(x, y, diameter, diameter);
        }
      }
    }
    if (mousePressed) {
      if (dist(mouseX, mouseY, 570, 300)<40) {
        as=0xFF73575C;
      }
      if (dist(mouseX, mouseY, 430, 300)<40) {
        as=0xFF126E82;
      }
      if (dist(mouseX, mouseY, 500, 230)<40) {
        point=1;
      }
    }
    if (point==1) {
      change();
    }
  }

   public void change() {
    small_diam=map(mouseX, 400, 600, 2, 10);
    big_diam=map(mouseY, 150, 280, 12, 20);
  }
}
class Agent {

  int num; 
  float[]phase; 
  float[]freq;  
  float[]amp;   

  PVector start;  
  float angle;   
  float axis_len;  
  float gasoline=0;  



  boolean longTail=false; 
  
  boolean prev_loc_is_white=true;  

  Agent() {
    num=PApplet.parseInt(random(10, 20));
    phase=new float[num];
    freq=new float[num];
    amp=new float[num];

    for (int i=0; i<num; i++) {  
      phase[i]=random(1000);
      freq[i]=random(0.0f, 0.08f);
      amp[i]=random(6, 12);
    }


    start=new PVector(random(width), random(height));
    angle=random(TWO_PI);
    axis_len=random(width/8, width*1.414f);


    if (random(1)<0.10f) {
      longTail=true;
    }
  }


   public float get_wave_value(float xpos) {  
    float y=0;
    for (int i=0; i<num; i++) {
      y+=sin(phase[i]+xpos*freq[i])*amp[i];
    }
    return y;
  }
  
   public PVector get_global_loc(float x, float y) { 
    float gx=start.x+cos(angle)*x;
    float gy=start.y+sin(angle)*x;

    gx+=cos(angle-PI/2)*y;
    gy+=sin(angle-PI/2)*y;

    return new PVector(gx, gy);
  }


   public void drawFullShape() { 

    PVector loc=get_global_loc(0, get_wave_value(0));  
    PVector prev=loc.copy();   

    for (float i=1; i<axis_len; i++) {  

      loc=get_global_loc(i, get_wave_value(i));

      if (loc.x<0 || loc.x>width || loc.y<0 || loc.y>height) { 
        break;
      }

      float bright=brightness(img.get(PApplet.parseInt(loc.x), PApplet.parseInt(loc.y))); 

      if (bright==0) {
        if (prev_loc_is_white)gasoline+=50;
        gasoline+=dist(prev.x, prev.y, loc.x, loc.y)*1.f; 
      } else {

        if (gasoline>10 && !longTail) { 
          gasoline*=0.6f;
        }
        gasoline-=1*(dist(prev.x, prev.y, loc.x, loc.y));  
        gasoline=max(0, gasoline); 
      }

      if (gasoline>0) {  
        float wt=sqrt(gasoline)*0.06f; 
        strokeWeight(wt);
        stroke(40);
        line(prev.x, prev.y, loc.x, loc.y);
      }

      if (bright==0) {    
        prev_loc_is_white=false;
      } else {
        prev_loc_is_white=true;
      }

      prev=loc.copy();
    }
  }

  
}
class Start {
  int n=0;
  int index=0;
  float r=200;
  String txt;
  int c=(0xFFD85916);
  int s=80;
  float y_1=60;

  Start() {
    G=createFont("Bell MT", 150);
    textFont(G);

    String[]lines={"Welcome to Visual Park"};
    txt="";
    for (int i=0; i<lines.length; i++) {
      txt+=lines[i];
    }
    txt=trim(txt);
  }

   public void display() {
    if (n<100) {
      textSize(40);
      fill(0xFFEA8958);
      text("Enter", 455, height/2+10);
      frameRate(20);
      float a=n*2*PI/txt.length();
      float xx=r*cos(a)+width/2-40;
      float yy=r*sin(a)+height/2;

      fill(0xFFF9F1DB, 50);
      rect(0, 0, width, height);
      fill(0xFFD85916);
      textSize(s);
      text(txt.charAt(index), xx, yy);
      index+=1;
      n+=1;
      s+=1;
      r+=5;
      if (index>21) {
        index=0;
      }
    }
    if (y_1<300) {
      fill(0xFFD85916);
      textSize(100);
      text("Welcome to Visual Park", 0, y_1);
      textSize(30);
      text("Filter only refer to Image named jpg",280,800);
      text("You'd better rename Image 1 & drop it in the data file",170,850);
      y_1++;
    }
  }
}


  public void settings() { size(1000, 1000);
smooth(); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "Final_Project" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
